//this program divides polynomials by plugging coefficients into a formula
import java.util.Scanner;
class polynomialDivide6 {
  public static void main(String args[]) {
    Scanner in = new Scanner(System.in); //sets up a method of input
    System.out.println("Input the degree of the polynomial.");
    int N = in.nextInt();
    double[] a = new double[N+1]; //defines arrays based on the degree of the polynomial
    double[] b = new double[2];
    double[] q = new double[N];
    System.out.println("Degree of polynomial is: "+N);
    System.out.println("Input the coefficients of the dividend.");
    for(int i = N; i >= 0; i--) { //prompts inputs based on the degree of the polynomial
      a[i] = in.nextDouble();
    }
    int k; //set up int k outside of the for loop so that we can use k outside of the loop
    System.out.print("Dividend is: ");
    for(k = N; k >= 1; k--) { //prints out dividend up to the second to last term
      if(a[k] > 0 & k != N) System.out.print("+"); //if the term is greater than zero and it isn't the first term, print a + sign
      if(a[k] != 1 & a[k] != 0) System.out.print(a[k] + "x"); //if the term's coefficient isn't one or zero, print that term
      else if(a[k] == 1) System.out.print("x"); //if the term's coefficient is one, just print 'x'
      if(k != 1 & a[k] != 0) System.out.print("^"+k); //if the degree of x isn't 1 and the term isn't zero, print the degree of x
    }
    k = 0;
    if(a[k] >= 0) System.out.print("+"); //if the last term is positive, print a + sign
    System.out.print(a[k]);
    System.out.println("\ninput the two coefficients of the divisor.");
    for(int i = 1; i >= 0; i--) { //prompts two inputs
      b[i] = in.nextDouble();
    }
    System.out.print("Divisor is: ");
    if(b[1] != 1 & b[1] != 0) System.out.print(b[1] + "x"); //if the first term's coefficient isn't one or zero, print the first term
    else if(b[1] == 1) System.out.print("x"); //if the first term's coefficient is one, just print 'x'
    if(b[0] > 0) System.out.print("+" + b[0]); //if the second term is greater than zero, print it
    else System.out.print(b[0]);
    if(b[1] == 0) System.out.print("No can do because b[1] is zero");
    else { //if the first term of the divisor isn't 0, calculate the final answer
      q[N-1] = a[N]/b[1];
      System.out.print("\nFinal answer is: ");
      if(q[N-1] != 1) System.out.print(q[N-1]);
      System.out.print("x^"+(N-1)); //prints the first term of the final answer
      for(int i = N-2; i >= 0; i--) {
        q[i] = recursive_answer(N, a, b, q, i);
        if(q[i] > 0) System.out.print("+"); //if the term is greater than zero, print a + sign
        if(q[i] != 1 & q[i] != 0 & i != 0) System.out.print(q[i] + "x");
        else if(q[i] == 1 & i != 0) System.out.print("x");
        else if(i == 0) System.out.print(q[i]);
        if(i > 1 & q[i] != 0) System.out.print("^"+i); //if the term's coefficient isn't one or zero, print that term
        else if(q[i] == 1 & i != 0) System.out.print("x"); //if the term's coefficient is one, just print 'x'
      }
    }
    double R = a[0]-b[0]*q[0];
    if(R != 0) {
      System.out.print("+("+R+"/");
      for(int i = 1; i >= 0; i--) {
        System.out.print(b[i]);
        if(i == 1) System.out.print("x");
      }
      System.out.print(")\n");
    }
  }
  public static double recursive_answer(int N, double[] a, double[] b, double[] q, int i) { //recursive method answer calculator
    q[i] = (a[i+1] - b[0]*q[i+1])/b[1]; //calculates the term with the degree of i
    return q[i];
  }
}
